/*-
 * Copyright (c) 2016 Doug Rabson
 * All rights reserved.
 */

#include <cctype>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <system_error>

#include <unistd.h>

#include "generate.h"
#include "parser.h"
#include "utils.h"

using namespace oncrpc::rpcgen;
using namespace std;

[[noreturn]] void usage()
{
    cerr << "usage: rpcgen [-t] [-x] [-i] [-c] [-n namespace] file.x" << endl;
    exit(1);
}

int
main(int argc, char* const argv[])
{
    bool generateTypes = false;
    bool generateXdr = false;
    bool generateInterface = false;
    bool generateClient = false;
    bool generateServer = false;
    vector<string> namespaces;
    int opt;

    while ((opt = getopt(argc, argv, "txicsn:")) != -1) {
        switch (opt) {
        case 't':
            generateTypes = true;
            break;

        case 'x':
            generateXdr = true;
            break;

        case 'i':
            generateInterface = true;
            break;

        case 'c':
            generateClient = true;
            break;

        case 's':
            generateServer = true;
            break;

        case 'n':
            try {
                namespaces = parseNamespaces(optarg);
            }
            catch (runtime_error& e) {
                cerr << e.what() << endl;
                return 1;
            }
            break;

        case '?':
        default:
            usage();
        }
    }
    argc -= optind;
    argv += optind;

    if (!(generateTypes || generateXdr || generateInterface || generateClient))
        usage();

    if (argc != 1)
        usage();
    ifstream file(argv[0]);
    if (!file.is_open()) {
        error_code ec(errno, system_category());
        cerr << "rpcgen: " << argv[0] << ": " << ec.message() << endl;
        return 1;
    }

    ostream& str = cout;

    Parser parser(argv[0], file, str);
    try {
        auto spec = parser.parse();

        str << "// Please do not edit this file." << endl;
        str << "// It was generated using rpcgen." << endl;
        str << endl;
        str << "#pragma once" << endl;
        str << endl;
        str << "#include <array>" << endl;
        str << "#include <cstdint>" << endl;
        str << "#include <string>" << endl;
        str << "#include <vector>" << endl;
        str << "#include <rpc++/xdr.h>" << endl;
        if (generateClient) {
            str << "#include <rpc++/channel.h>" << endl;
            str << "#include <rpc++/client.h>" << endl;
        }
        if (generateServer) {
            str << "#include <rpc++/server.h>" << endl;
        }

        for (const auto& ns: namespaces)
            str << "namespace " << ns << " {" << endl;

        str << endl;

        if (generateTypes) {
            GenerateTypes gen(str);
            spec->visit(&gen);
        }
        if (generateXdr) {
            GenerateXdr gen(str);
            spec->visit(&gen);
        }
        if (generateInterface) {
            GenerateInterface gen(str);
            spec->visit(&gen);
        }
        if (generateClient) {
            GenerateClient gen(str);
            spec->visit(&gen);
        }
        if (generateServer) {
            GenerateServer gen(str);
            spec->visit(&gen);
        }

        for (const auto& ns: namespaces)
            str << "} // " << ns << endl;
    }
    catch (runtime_error& e)
    {
        cerr << e.what() << endl;
        exit(1);
    }

    return 0;
}
